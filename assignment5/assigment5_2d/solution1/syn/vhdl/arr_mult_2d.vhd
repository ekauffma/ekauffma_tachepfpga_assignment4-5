-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arr_mult_2d is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inA_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_0_EN_A : OUT STD_LOGIC;
    inA_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_0_Clk_A : OUT STD_LOGIC;
    inA_0_Rst_A : OUT STD_LOGIC;
    inA_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_1_EN_A : OUT STD_LOGIC;
    inA_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_1_Clk_A : OUT STD_LOGIC;
    inA_1_Rst_A : OUT STD_LOGIC;
    inA_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_2_EN_A : OUT STD_LOGIC;
    inA_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_2_Clk_A : OUT STD_LOGIC;
    inA_2_Rst_A : OUT STD_LOGIC;
    inA_3_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_3_EN_A : OUT STD_LOGIC;
    inA_3_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_3_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_3_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_3_Clk_A : OUT STD_LOGIC;
    inA_3_Rst_A : OUT STD_LOGIC;
    inA_4_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_4_EN_A : OUT STD_LOGIC;
    inA_4_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_4_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_4_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_4_Clk_A : OUT STD_LOGIC;
    inA_4_Rst_A : OUT STD_LOGIC;
    inA_5_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_5_EN_A : OUT STD_LOGIC;
    inA_5_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_5_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_5_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_5_Clk_A : OUT STD_LOGIC;
    inA_5_Rst_A : OUT STD_LOGIC;
    inA_6_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_6_EN_A : OUT STD_LOGIC;
    inA_6_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_6_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_6_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_6_Clk_A : OUT STD_LOGIC;
    inA_6_Rst_A : OUT STD_LOGIC;
    inA_7_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_7_EN_A : OUT STD_LOGIC;
    inA_7_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_7_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_7_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_7_Clk_A : OUT STD_LOGIC;
    inA_7_Rst_A : OUT STD_LOGIC;
    inA_8_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_8_EN_A : OUT STD_LOGIC;
    inA_8_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_8_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_8_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_8_Clk_A : OUT STD_LOGIC;
    inA_8_Rst_A : OUT STD_LOGIC;
    inA_9_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_9_EN_A : OUT STD_LOGIC;
    inA_9_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_9_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_9_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_9_Clk_A : OUT STD_LOGIC;
    inA_9_Rst_A : OUT STD_LOGIC;
    inA_10_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_10_EN_A : OUT STD_LOGIC;
    inA_10_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_10_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_10_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_10_Clk_A : OUT STD_LOGIC;
    inA_10_Rst_A : OUT STD_LOGIC;
    inA_11_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_11_EN_A : OUT STD_LOGIC;
    inA_11_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_11_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_11_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_11_Clk_A : OUT STD_LOGIC;
    inA_11_Rst_A : OUT STD_LOGIC;
    inA_12_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_12_EN_A : OUT STD_LOGIC;
    inA_12_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_12_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_12_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_12_Clk_A : OUT STD_LOGIC;
    inA_12_Rst_A : OUT STD_LOGIC;
    inA_13_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_13_EN_A : OUT STD_LOGIC;
    inA_13_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_13_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_13_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_13_Clk_A : OUT STD_LOGIC;
    inA_13_Rst_A : OUT STD_LOGIC;
    inA_14_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_14_EN_A : OUT STD_LOGIC;
    inA_14_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_14_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_14_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_14_Clk_A : OUT STD_LOGIC;
    inA_14_Rst_A : OUT STD_LOGIC;
    inA_15_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_15_EN_A : OUT STD_LOGIC;
    inA_15_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_15_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_15_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_15_Clk_A : OUT STD_LOGIC;
    inA_15_Rst_A : OUT STD_LOGIC;
    inA_16_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_16_EN_A : OUT STD_LOGIC;
    inA_16_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_16_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_16_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_16_Clk_A : OUT STD_LOGIC;
    inA_16_Rst_A : OUT STD_LOGIC;
    inA_17_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_17_EN_A : OUT STD_LOGIC;
    inA_17_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_17_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_17_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_17_Clk_A : OUT STD_LOGIC;
    inA_17_Rst_A : OUT STD_LOGIC;
    inA_18_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_18_EN_A : OUT STD_LOGIC;
    inA_18_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_18_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_18_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_18_Clk_A : OUT STD_LOGIC;
    inA_18_Rst_A : OUT STD_LOGIC;
    inA_19_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_19_EN_A : OUT STD_LOGIC;
    inA_19_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_19_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_19_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_19_Clk_A : OUT STD_LOGIC;
    inA_19_Rst_A : OUT STD_LOGIC;
    inA_20_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_20_EN_A : OUT STD_LOGIC;
    inA_20_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_20_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_20_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_20_Clk_A : OUT STD_LOGIC;
    inA_20_Rst_A : OUT STD_LOGIC;
    inA_21_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_21_EN_A : OUT STD_LOGIC;
    inA_21_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_21_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_21_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_21_Clk_A : OUT STD_LOGIC;
    inA_21_Rst_A : OUT STD_LOGIC;
    inA_22_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_22_EN_A : OUT STD_LOGIC;
    inA_22_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_22_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_22_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_22_Clk_A : OUT STD_LOGIC;
    inA_22_Rst_A : OUT STD_LOGIC;
    inA_23_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_23_EN_A : OUT STD_LOGIC;
    inA_23_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inA_23_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inA_23_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inA_23_Clk_A : OUT STD_LOGIC;
    inA_23_Rst_A : OUT STD_LOGIC;
    inB_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_0_EN_A : OUT STD_LOGIC;
    inB_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_0_Clk_A : OUT STD_LOGIC;
    inB_0_Rst_A : OUT STD_LOGIC;
    inB_0_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_0_EN_B : OUT STD_LOGIC;
    inB_0_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_0_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_0_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_0_Clk_B : OUT STD_LOGIC;
    inB_0_Rst_B : OUT STD_LOGIC;
    inB_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_1_EN_A : OUT STD_LOGIC;
    inB_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_1_Clk_A : OUT STD_LOGIC;
    inB_1_Rst_A : OUT STD_LOGIC;
    inB_1_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_1_EN_B : OUT STD_LOGIC;
    inB_1_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_1_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_1_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_1_Clk_B : OUT STD_LOGIC;
    inB_1_Rst_B : OUT STD_LOGIC;
    inB_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_2_EN_A : OUT STD_LOGIC;
    inB_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_2_Clk_A : OUT STD_LOGIC;
    inB_2_Rst_A : OUT STD_LOGIC;
    inB_2_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_2_EN_B : OUT STD_LOGIC;
    inB_2_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_2_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_2_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_2_Clk_B : OUT STD_LOGIC;
    inB_2_Rst_B : OUT STD_LOGIC;
    inB_3_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_3_EN_A : OUT STD_LOGIC;
    inB_3_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_3_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_3_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_3_Clk_A : OUT STD_LOGIC;
    inB_3_Rst_A : OUT STD_LOGIC;
    inB_3_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_3_EN_B : OUT STD_LOGIC;
    inB_3_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_3_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_3_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_3_Clk_B : OUT STD_LOGIC;
    inB_3_Rst_B : OUT STD_LOGIC;
    inB_4_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_4_EN_A : OUT STD_LOGIC;
    inB_4_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_4_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_4_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_4_Clk_A : OUT STD_LOGIC;
    inB_4_Rst_A : OUT STD_LOGIC;
    inB_4_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_4_EN_B : OUT STD_LOGIC;
    inB_4_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_4_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_4_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_4_Clk_B : OUT STD_LOGIC;
    inB_4_Rst_B : OUT STD_LOGIC;
    inB_5_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_5_EN_A : OUT STD_LOGIC;
    inB_5_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_5_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_5_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_5_Clk_A : OUT STD_LOGIC;
    inB_5_Rst_A : OUT STD_LOGIC;
    inB_5_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_5_EN_B : OUT STD_LOGIC;
    inB_5_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_5_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_5_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_5_Clk_B : OUT STD_LOGIC;
    inB_5_Rst_B : OUT STD_LOGIC;
    inB_6_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_6_EN_A : OUT STD_LOGIC;
    inB_6_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_6_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_6_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_6_Clk_A : OUT STD_LOGIC;
    inB_6_Rst_A : OUT STD_LOGIC;
    inB_6_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_6_EN_B : OUT STD_LOGIC;
    inB_6_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_6_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_6_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_6_Clk_B : OUT STD_LOGIC;
    inB_6_Rst_B : OUT STD_LOGIC;
    inB_7_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_7_EN_A : OUT STD_LOGIC;
    inB_7_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_7_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_7_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_7_Clk_A : OUT STD_LOGIC;
    inB_7_Rst_A : OUT STD_LOGIC;
    inB_7_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_7_EN_B : OUT STD_LOGIC;
    inB_7_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_7_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_7_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_7_Clk_B : OUT STD_LOGIC;
    inB_7_Rst_B : OUT STD_LOGIC;
    inB_8_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_8_EN_A : OUT STD_LOGIC;
    inB_8_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_8_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_8_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_8_Clk_A : OUT STD_LOGIC;
    inB_8_Rst_A : OUT STD_LOGIC;
    inB_8_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_8_EN_B : OUT STD_LOGIC;
    inB_8_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_8_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_8_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_8_Clk_B : OUT STD_LOGIC;
    inB_8_Rst_B : OUT STD_LOGIC;
    inB_9_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_9_EN_A : OUT STD_LOGIC;
    inB_9_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_9_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_9_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_9_Clk_A : OUT STD_LOGIC;
    inB_9_Rst_A : OUT STD_LOGIC;
    inB_9_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_9_EN_B : OUT STD_LOGIC;
    inB_9_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    inB_9_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    inB_9_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_9_Clk_B : OUT STD_LOGIC;
    inB_9_Rst_B : OUT STD_LOGIC;
    out_0_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_0_EN_A : OUT STD_LOGIC;
    out_0_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_0_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_0_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_0_Clk_A : OUT STD_LOGIC;
    out_0_Rst_A : OUT STD_LOGIC;
    out_1_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_1_EN_A : OUT STD_LOGIC;
    out_1_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_1_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_1_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_1_Clk_A : OUT STD_LOGIC;
    out_1_Rst_A : OUT STD_LOGIC;
    out_2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_2_EN_A : OUT STD_LOGIC;
    out_2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_2_Clk_A : OUT STD_LOGIC;
    out_2_Rst_A : OUT STD_LOGIC;
    out_3_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_3_EN_A : OUT STD_LOGIC;
    out_3_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_3_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_3_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_3_Clk_A : OUT STD_LOGIC;
    out_3_Rst_A : OUT STD_LOGIC;
    out_4_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_4_EN_A : OUT STD_LOGIC;
    out_4_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_4_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_4_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_4_Clk_A : OUT STD_LOGIC;
    out_4_Rst_A : OUT STD_LOGIC;
    out_5_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_5_EN_A : OUT STD_LOGIC;
    out_5_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_5_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_5_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_5_Clk_A : OUT STD_LOGIC;
    out_5_Rst_A : OUT STD_LOGIC;
    out_6_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_6_EN_A : OUT STD_LOGIC;
    out_6_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_6_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_6_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_6_Clk_A : OUT STD_LOGIC;
    out_6_Rst_A : OUT STD_LOGIC;
    out_7_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_7_EN_A : OUT STD_LOGIC;
    out_7_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_7_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_7_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_7_Clk_A : OUT STD_LOGIC;
    out_7_Rst_A : OUT STD_LOGIC;
    out_8_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_8_EN_A : OUT STD_LOGIC;
    out_8_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_8_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_8_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_8_Clk_A : OUT STD_LOGIC;
    out_8_Rst_A : OUT STD_LOGIC;
    out_9_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_9_EN_A : OUT STD_LOGIC;
    out_9_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_9_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_9_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    out_9_Clk_A : OUT STD_LOGIC;
    out_9_Rst_A : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of arr_mult_2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "arr_mult_2d_arr_mult_2d,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7v585t-ffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.976643,HLS_SYN_LAT=2403,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=602,HLS_SYN_LUT=4186,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln1057_reg_5314 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1057_fu_3528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1057_fu_3534_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1057_reg_5318 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1057_fu_3552_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1057_reg_5323 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1057_reg_5323_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1057_1_fu_3566_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln1057_1_reg_5328 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1057_fu_3574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1057_reg_5333 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1057_reg_5333_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln870_fu_3602_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_reg_5467 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln870_1_fu_3606_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_1_reg_5472 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_2_fu_3610_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_2_reg_5477 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_3_fu_3614_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_3_reg_5482 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_4_fu_3618_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_4_reg_5487 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_5_fu_3622_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_5_reg_5492 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_6_fu_3626_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_6_reg_5497 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_7_fu_3630_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_7_reg_5502 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_8_fu_3634_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_8_reg_5507 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_9_fu_3646_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_9_reg_5512 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_10_fu_3652_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_10_reg_5517 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_11_fu_3656_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_11_reg_5522 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_12_fu_3660_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_12_reg_5527 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_13_fu_3664_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_13_reg_5532 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_14_fu_3668_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_14_reg_5537 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_15_fu_3672_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_15_reg_5542 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_16_fu_3676_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_16_reg_5547 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_17_fu_3680_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_17_reg_5552 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_18_fu_3684_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_18_reg_5557 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_19_fu_3688_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_19_reg_5562 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_20_fu_3692_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_20_reg_5567 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_21_fu_3696_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_21_reg_5572 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_22_fu_3700_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_22_reg_5577 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_23_fu_3704_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln870_23_reg_5582 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_fu_3730_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_reg_5637 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal mul_ln870_1_fu_3739_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_1_reg_5642 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_3_fu_3761_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_3_reg_5652 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln870_14_fu_3771_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_14_reg_5657 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_16_fu_3799_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_16_reg_5662 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal mul_ln870_6_fu_3809_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_6_reg_5667 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal mul_ln870_7_fu_3818_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_7_reg_5672 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_4087_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_20_reg_5677 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_18_fu_3841_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_18_reg_5682 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal add_ln870_21_fu_3846_p2 : STD_LOGIC_VECTOR (9 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln870_21_fu_3846_p2 : signal is "no";
    signal add_ln870_21_reg_5687 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_11_fu_3855_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_11_reg_5692 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal mul_ln870_12_fu_3864_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_12_reg_5697 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_23_fu_3882_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_23_reg_5702 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_14_fu_3901_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_14_reg_5707 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal add_ln870_7_fu_3906_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_7_reg_5712 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_10_fu_3935_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_10_reg_5717 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal mul_ln870_17_fu_3944_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_17_reg_5722 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal mul_ln870_18_fu_3953_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_18_reg_5727 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_11_fu_3962_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_11_reg_5732 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_20_fu_3980_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_20_reg_5737 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal add_ln870_5_fu_3990_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_5_reg_5742 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_21_fu_3999_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_21_reg_5747 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_2_fu_4013_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_2_reg_5752 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_9_reg_2680 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_phi_fu_2718_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_reg_2715 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_1_reg_2750 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_2_reg_2810 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_3_reg_2845 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_4_reg_2880 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_5_reg_2915 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_6_reg_2950 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_7_reg_2985 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_8_reg_3020 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_10_reg_3055 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_11_reg_3090 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_12_reg_3125 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_13_reg_3160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_14_reg_3195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_15_reg_3230 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_16_reg_3265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_17_reg_3300 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_18_reg_3335 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_19_reg_3370 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_phi_ln870_20_reg_3405 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln870_21_reg_3440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_phi_ln870_22_reg_3475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal j_V_fu_206 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln870_1_fu_3708_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_V_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_V_fu_210 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_V_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_214 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal inA_23_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_3_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_4_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_5_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_6_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_7_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_8_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_9_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_10_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_11_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_12_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_13_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_14_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_15_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_16_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_17_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_18_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_19_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_20_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_21_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inA_22_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_8_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_8_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal inB_7_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_7_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_6_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_6_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_5_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_5_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_4_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_4_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_3_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_3_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_2_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_1_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_0_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_9_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal inB_9_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_8_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_7_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_6_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_5_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_4_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_3_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_1_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_0_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal out_9_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1057_1_fu_3546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln870_fu_3560_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln870_9_fu_3646_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_9_fu_3646_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_fu_3730_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_1_fu_3739_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_2_fu_3752_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_3_fu_3761_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_2_fu_3752_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_13_fu_3766_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_4_fu_3780_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_5_fu_3789_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_5_fu_3789_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_15_fu_3794_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_4_fu_3780_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_6_fu_3809_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_7_fu_3818_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_8_fu_3827_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_10_fu_3836_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_8_fu_3827_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_10_fu_3836_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_11_fu_3855_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_12_fu_3864_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_19_fu_3873_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_22_fu_3877_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_17_fu_3869_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_13_fu_3892_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_14_fu_3901_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_13_fu_3892_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_15_fu_3915_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_16_fu_3924_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_16_fu_3924_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_15_fu_3915_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_9_fu_3929_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_17_fu_3944_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_18_fu_3953_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_8_fu_3958_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_19_fu_3971_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_20_fu_3980_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_19_fu_3971_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_4_fu_3985_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_21_fu_3999_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_22_fu_4008_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln870_22_fu_4008_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_3_fu_4018_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_6_fu_4022_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_12_fu_4027_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln870_24_fu_4032_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_4087_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_2396 : BOOLEAN;
    signal ap_condition_1777 : BOOLEAN;
    signal ap_condition_1191 : BOOLEAN;
    signal ap_condition_2404 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component arr_mult_2d_mul_10s_10s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component arr_mult_2d_mac_muladd_10s_10s_10ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component arr_mult_2d_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component arr_mult_2d_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component arr_mult_2d_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_10s_10s_10_1_1_U1 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_9_fu_3646_p0,
        din1 => mul_ln870_9_fu_3646_p1,
        dout => mul_ln870_9_fu_3646_p2);

    mul_10s_10s_10_1_1_U2 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_fu_3730_p0,
        din1 => trunc_ln870_reg_5467,
        dout => mul_ln870_fu_3730_p2);

    mul_10s_10s_10_1_1_U3 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_1_fu_3739_p0,
        din1 => trunc_ln870_1_reg_5472,
        dout => mul_ln870_1_fu_3739_p2);

    mul_10s_10s_10_1_1_U4 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_2_fu_3752_p0,
        din1 => trunc_ln870_2_reg_5477,
        dout => mul_ln870_2_fu_3752_p2);

    mul_10s_10s_10_1_1_U5 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_3_fu_3761_p0,
        din1 => trunc_ln870_3_reg_5482,
        dout => mul_ln870_3_fu_3761_p2);

    mul_10s_10s_10_1_1_U6 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_4_fu_3780_p0,
        din1 => trunc_ln870_4_reg_5487,
        dout => mul_ln870_4_fu_3780_p2);

    mul_10s_10s_10_1_1_U7 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_5_fu_3789_p0,
        din1 => trunc_ln870_5_reg_5492,
        dout => mul_ln870_5_fu_3789_p2);

    mul_10s_10s_10_1_1_U8 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_6_fu_3809_p0,
        din1 => trunc_ln870_6_reg_5497,
        dout => mul_ln870_6_fu_3809_p2);

    mul_10s_10s_10_1_1_U9 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_7_fu_3818_p0,
        din1 => trunc_ln870_7_reg_5502,
        dout => mul_ln870_7_fu_3818_p2);

    mul_10s_10s_10_1_1_U10 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_8_fu_3827_p0,
        din1 => trunc_ln870_8_reg_5507,
        dout => mul_ln870_8_fu_3827_p2);

    mul_10s_10s_10_1_1_U11 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_10_fu_3836_p0,
        din1 => trunc_ln870_10_reg_5517,
        dout => mul_ln870_10_fu_3836_p2);

    mul_10s_10s_10_1_1_U12 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_11_fu_3855_p0,
        din1 => trunc_ln870_11_reg_5522,
        dout => mul_ln870_11_fu_3855_p2);

    mul_10s_10s_10_1_1_U13 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_12_fu_3864_p0,
        din1 => trunc_ln870_12_reg_5527,
        dout => mul_ln870_12_fu_3864_p2);

    mul_10s_10s_10_1_1_U14 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_13_fu_3892_p0,
        din1 => trunc_ln870_13_reg_5532,
        dout => mul_ln870_13_fu_3892_p2);

    mul_10s_10s_10_1_1_U15 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_14_fu_3901_p0,
        din1 => trunc_ln870_14_reg_5537,
        dout => mul_ln870_14_fu_3901_p2);

    mul_10s_10s_10_1_1_U16 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_15_fu_3915_p0,
        din1 => trunc_ln870_15_reg_5542,
        dout => mul_ln870_15_fu_3915_p2);

    mul_10s_10s_10_1_1_U17 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_16_fu_3924_p0,
        din1 => trunc_ln870_16_reg_5547,
        dout => mul_ln870_16_fu_3924_p2);

    mul_10s_10s_10_1_1_U18 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_17_fu_3944_p0,
        din1 => trunc_ln870_17_reg_5552,
        dout => mul_ln870_17_fu_3944_p2);

    mul_10s_10s_10_1_1_U19 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_18_fu_3953_p0,
        din1 => trunc_ln870_18_reg_5557,
        dout => mul_ln870_18_fu_3953_p2);

    mul_10s_10s_10_1_1_U20 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_19_fu_3971_p0,
        din1 => trunc_ln870_19_reg_5562,
        dout => mul_ln870_19_fu_3971_p2);

    mul_10s_10s_10_1_1_U21 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_20_fu_3980_p0,
        din1 => trunc_ln870_20_reg_5567,
        dout => mul_ln870_20_fu_3980_p2);

    mul_10s_10s_10_1_1_U22 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_21_fu_3999_p0,
        din1 => trunc_ln870_21_reg_5572,
        dout => mul_ln870_21_fu_3999_p2);

    mul_10s_10s_10_1_1_U23 : component arr_mult_2d_mul_10s_10s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln870_22_fu_4008_p0,
        din1 => trunc_ln870_22_reg_5577,
        dout => mul_ln870_22_fu_4008_p2);

    mac_muladd_10s_10s_10ns_10_4_1_U24 : component arr_mult_2d_mac_muladd_10s_10s_10ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_4087_p0,
        din1 => trunc_ln870_23_reg_5582,
        din2 => mul_ln870_9_reg_5512,
        ce => ap_const_logic_1,
        dout => grp_fu_4087_p3);

    flow_control_loop_pipe_U : component arr_mult_2d_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1777)) then
                if ((ap_const_boolean_1 = ap_condition_2396)) then 
                    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 <= inB_9_Dout_A;
                elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 <= inB_8_Dout_A;
                elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 <= inB_7_Dout_A;
                elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 <= inB_6_Dout_A;
                elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 <= inB_5_Dout_A;
                elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 <= inB_4_Dout_A;
                elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 <= inB_3_Dout_A;
                elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 <= inB_2_Dout_A;
                elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 <= inB_1_Dout_A;
                elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                    ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785 <= inB_0_Dout_A;
                end if;
            end if; 
        end if;
    end process;

    i_V_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_2404)) then 
                    i_V_fu_210 <= ap_const_lv5_0;
                elsif ((ap_const_boolean_1 = ap_condition_1191)) then 
                    i_V_fu_210 <= select_ln1057_1_reg_5328;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_2404)) then 
                    indvar_flatten_fu_214 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_condition_1191)) then 
                    indvar_flatten_fu_214 <= add_ln1057_reg_5318;
                end if;
            end if; 
        end if;
    end process;

    j_V_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_2404)) then 
                    j_V_fu_206 <= ap_const_lv4_0;
                elsif ((ap_const_boolean_1 = ap_condition_1191)) then 
                    j_V_fu_206 <= add_ln870_1_fu_3708_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln1057_reg_5318 <= add_ln1057_fu_3534_p2;
                add_ln870_2_reg_5752 <= add_ln870_2_fu_4013_p2;
                icmp_ln1057_reg_5314 <= icmp_ln1057_fu_3528_p2;
                mul_ln870_21_reg_5747 <= mul_ln870_21_fu_3999_p2;
                select_ln1057_reg_5323_pp0_iter1_reg <= select_ln1057_reg_5323;
                    zext_ln1057_reg_5333_pp0_iter1_reg(4 downto 0) <= zext_ln1057_reg_5333(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                add_ln870_10_reg_5717 <= add_ln870_10_fu_3935_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                add_ln870_11_reg_5732 <= add_ln870_11_fu_3962_p2;
                mul_ln870_17_reg_5722 <= mul_ln870_17_fu_3944_p2;
                mul_ln870_18_reg_5727 <= mul_ln870_18_fu_3953_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln870_14_reg_5657 <= add_ln870_14_fu_3771_p2;
                mul_ln870_3_reg_5652 <= mul_ln870_3_fu_3761_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln870_16_reg_5662 <= add_ln870_16_fu_3799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                add_ln870_18_reg_5682 <= add_ln870_18_fu_3841_p2;
                add_ln870_21_reg_5687 <= add_ln870_21_fu_3846_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                add_ln870_20_reg_5677 <= grp_fu_4087_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln870_23_reg_5702 <= add_ln870_23_fu_3882_p2;
                mul_ln870_11_reg_5692 <= mul_ln870_11_fu_3855_p2;
                mul_ln870_12_reg_5697 <= mul_ln870_12_fu_3864_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                add_ln870_5_reg_5742 <= add_ln870_5_fu_3990_p2;
                mul_ln870_20_reg_5737 <= mul_ln870_20_fu_3980_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                add_ln870_7_reg_5712 <= add_ln870_7_fu_3906_p2;
                mul_ln870_14_reg_5707 <= mul_ln870_14_fu_3901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln870_1_reg_5642 <= mul_ln870_1_fu_3739_p2;
                mul_ln870_reg_5637 <= mul_ln870_fu_3730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                mul_ln870_6_reg_5667 <= mul_ln870_6_fu_3809_p2;
                mul_ln870_7_reg_5672 <= mul_ln870_7_fu_3818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln870_9_reg_5512 <= mul_ln870_9_fu_3646_p2;
                trunc_ln870_10_reg_5517 <= trunc_ln870_10_fu_3652_p1;
                trunc_ln870_11_reg_5522 <= trunc_ln870_11_fu_3656_p1;
                trunc_ln870_12_reg_5527 <= trunc_ln870_12_fu_3660_p1;
                trunc_ln870_13_reg_5532 <= trunc_ln870_13_fu_3664_p1;
                trunc_ln870_14_reg_5537 <= trunc_ln870_14_fu_3668_p1;
                trunc_ln870_15_reg_5542 <= trunc_ln870_15_fu_3672_p1;
                trunc_ln870_16_reg_5547 <= trunc_ln870_16_fu_3676_p1;
                trunc_ln870_17_reg_5552 <= trunc_ln870_17_fu_3680_p1;
                trunc_ln870_18_reg_5557 <= trunc_ln870_18_fu_3684_p1;
                trunc_ln870_19_reg_5562 <= trunc_ln870_19_fu_3688_p1;
                trunc_ln870_1_reg_5472 <= trunc_ln870_1_fu_3606_p1;
                trunc_ln870_20_reg_5567 <= trunc_ln870_20_fu_3692_p1;
                trunc_ln870_21_reg_5572 <= trunc_ln870_21_fu_3696_p1;
                trunc_ln870_22_reg_5577 <= trunc_ln870_22_fu_3700_p1;
                trunc_ln870_23_reg_5582 <= trunc_ln870_23_fu_3704_p1;
                trunc_ln870_2_reg_5477 <= trunc_ln870_2_fu_3610_p1;
                trunc_ln870_3_reg_5482 <= trunc_ln870_3_fu_3614_p1;
                trunc_ln870_4_reg_5487 <= trunc_ln870_4_fu_3618_p1;
                trunc_ln870_5_reg_5492 <= trunc_ln870_5_fu_3622_p1;
                trunc_ln870_6_reg_5497 <= trunc_ln870_6_fu_3626_p1;
                trunc_ln870_7_reg_5502 <= trunc_ln870_7_fu_3630_p1;
                trunc_ln870_8_reg_5507 <= trunc_ln870_8_fu_3634_p1;
                trunc_ln870_reg_5467 <= trunc_ln870_fu_3602_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1057_fu_3528_p2 = ap_const_lv1_0))) then
                select_ln1057_1_reg_5328 <= select_ln1057_1_fu_3566_p3;
                select_ln1057_reg_5323 <= select_ln1057_fu_3552_p3;
                    zext_ln1057_reg_5333(4 downto 0) <= zext_ln1057_fu_3574_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln1057_reg_5333(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln1057_reg_5333_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage11_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln1057_fu_3534_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    add_ln870_10_fu_3935_p2 <= std_logic_vector(unsigned(add_ln870_9_fu_3929_p2) + unsigned(mul_ln870_14_reg_5707));
    add_ln870_11_fu_3962_p2 <= std_logic_vector(unsigned(add_ln870_10_reg_5717) + unsigned(add_ln870_8_fu_3958_p2));
    add_ln870_12_fu_4027_p2 <= std_logic_vector(unsigned(add_ln870_11_reg_5732) + unsigned(add_ln870_6_fu_4022_p2));
    add_ln870_13_fu_3766_p2 <= std_logic_vector(unsigned(mul_ln870_1_reg_5642) + unsigned(mul_ln870_2_fu_3752_p2));
    add_ln870_14_fu_3771_p2 <= std_logic_vector(unsigned(add_ln870_13_fu_3766_p2) + unsigned(mul_ln870_reg_5637));
    add_ln870_15_fu_3794_p2 <= std_logic_vector(unsigned(mul_ln870_3_reg_5652) + unsigned(mul_ln870_5_fu_3789_p2));
    add_ln870_16_fu_3799_p2 <= std_logic_vector(unsigned(add_ln870_15_fu_3794_p2) + unsigned(mul_ln870_4_fu_3780_p2));
    add_ln870_17_fu_3869_p2 <= std_logic_vector(unsigned(add_ln870_16_reg_5662) + unsigned(add_ln870_14_reg_5657));
    add_ln870_18_fu_3841_p2 <= std_logic_vector(unsigned(mul_ln870_6_reg_5667) + unsigned(mul_ln870_8_fu_3827_p2));
    add_ln870_19_fu_3873_p2 <= std_logic_vector(unsigned(add_ln870_18_reg_5682) + unsigned(mul_ln870_7_reg_5672));
    add_ln870_1_fu_3708_p2 <= std_logic_vector(unsigned(select_ln1057_reg_5323) + unsigned(ap_const_lv4_1));
    add_ln870_21_fu_3846_p2 <= std_logic_vector(signed(add_ln870_20_reg_5677) + signed(mul_ln870_10_fu_3836_p2));
    add_ln870_22_fu_3877_p2 <= std_logic_vector(unsigned(add_ln870_21_reg_5687) + unsigned(add_ln870_19_fu_3873_p2));
    add_ln870_23_fu_3882_p2 <= std_logic_vector(unsigned(add_ln870_22_fu_3877_p2) + unsigned(add_ln870_17_fu_3869_p2));
    add_ln870_24_fu_4032_p2 <= std_logic_vector(unsigned(add_ln870_23_reg_5702) + unsigned(add_ln870_12_fu_4027_p2));
    add_ln870_2_fu_4013_p2 <= std_logic_vector(unsigned(mul_ln870_22_fu_4008_p2) + unsigned(mul_ln870_20_reg_5737));
    add_ln870_3_fu_4018_p2 <= std_logic_vector(unsigned(add_ln870_2_reg_5752) + unsigned(mul_ln870_21_reg_5747));
    add_ln870_4_fu_3985_p2 <= std_logic_vector(unsigned(mul_ln870_19_fu_3971_p2) + unsigned(mul_ln870_18_reg_5727));
    add_ln870_5_fu_3990_p2 <= std_logic_vector(unsigned(add_ln870_4_fu_3985_p2) + unsigned(mul_ln870_17_reg_5722));
    add_ln870_6_fu_4022_p2 <= std_logic_vector(unsigned(add_ln870_5_reg_5742) + unsigned(add_ln870_3_fu_4018_p2));
    add_ln870_7_fu_3906_p2 <= std_logic_vector(unsigned(mul_ln870_13_fu_3892_p2) + unsigned(mul_ln870_12_reg_5697));
    add_ln870_8_fu_3958_p2 <= std_logic_vector(unsigned(add_ln870_7_reg_5712) + unsigned(mul_ln870_11_reg_5692));
    add_ln870_9_fu_3929_p2 <= std_logic_vector(unsigned(mul_ln870_16_fu_3924_p2) + unsigned(mul_ln870_15_fu_3915_p2));
    add_ln870_fu_3560_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_V_load) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1191_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1057_reg_5314, ap_block_pp0_stage1_11001)
    begin
                ap_condition_1191 <= ((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_1777_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln1057_reg_5314, ap_block_pp0_stage1_11001)
    begin
                ap_condition_1777 <= ((icmp_ln1057_reg_5314 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_2396_assign_proc : process(select_ln1057_reg_5323)
    begin
                ap_condition_2396 <= (not((select_ln1057_reg_5323 = ap_const_lv4_0)) and not((select_ln1057_reg_5323 = ap_const_lv4_1)) and not((select_ln1057_reg_5323 = ap_const_lv4_2)) and not((select_ln1057_reg_5323 = ap_const_lv4_3)) and not((select_ln1057_reg_5323 = ap_const_lv4_4)) and not((select_ln1057_reg_5323 = ap_const_lv4_5)) and not((select_ln1057_reg_5323 = ap_const_lv4_6)) and not((select_ln1057_reg_5323 = ap_const_lv4_7)) and not((select_ln1057_reg_5323 = ap_const_lv4_8)));
    end process;


    ap_condition_2404_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
                ap_condition_2404 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln1057_reg_5314)
    begin
        if (((icmp_ln1057_reg_5314 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_phi_mux_phi_ln870_10_phi_fu_3058_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_10_reg_3055, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_10_reg_3055;
            end if;
        else 
            ap_phi_mux_phi_ln870_10_phi_fu_3058_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_10_reg_3055;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_11_phi_fu_3093_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_11_reg_3090, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_11_reg_3090;
            end if;
        else 
            ap_phi_mux_phi_ln870_11_phi_fu_3093_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_11_reg_3090;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_12_phi_fu_3128_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_12_reg_3125, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_12_reg_3125;
            end if;
        else 
            ap_phi_mux_phi_ln870_12_phi_fu_3128_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_12_reg_3125;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_13_phi_fu_3163_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_13_reg_3160, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_13_reg_3160;
            end if;
        else 
            ap_phi_mux_phi_ln870_13_phi_fu_3163_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_13_reg_3160;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_14_phi_fu_3198_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_14_reg_3195, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_14_reg_3195;
            end if;
        else 
            ap_phi_mux_phi_ln870_14_phi_fu_3198_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_14_reg_3195;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_15_phi_fu_3233_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_15_reg_3230, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_15_reg_3230;
            end if;
        else 
            ap_phi_mux_phi_ln870_15_phi_fu_3233_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_15_reg_3230;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_16_phi_fu_3268_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_16_reg_3265, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_16_reg_3265;
            end if;
        else 
            ap_phi_mux_phi_ln870_16_phi_fu_3268_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_16_reg_3265;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_17_phi_fu_3303_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_17_reg_3300, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_17_reg_3300;
            end if;
        else 
            ap_phi_mux_phi_ln870_17_phi_fu_3303_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_17_reg_3300;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_18_phi_fu_3338_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_18_reg_3335, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_18_reg_3335;
            end if;
        else 
            ap_phi_mux_phi_ln870_18_phi_fu_3338_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_18_reg_3335;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_19_phi_fu_3373_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_19_reg_3370, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_19_reg_3370;
            end if;
        else 
            ap_phi_mux_phi_ln870_19_phi_fu_3373_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_19_reg_3370;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_1_phi_fu_2753_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_1_reg_2750, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_1_reg_2750;
            end if;
        else 
            ap_phi_mux_phi_ln870_1_phi_fu_2753_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_1_reg_2750;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_20_phi_fu_3408_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_20_reg_3405, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_20_reg_3405;
            end if;
        else 
            ap_phi_mux_phi_ln870_20_phi_fu_3408_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_20_reg_3405;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_21_phi_fu_3443_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter1_phi_ln870_21_reg_3440, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= ap_phi_reg_pp0_iter1_phi_ln870_21_reg_3440;
            end if;
        else 
            ap_phi_mux_phi_ln870_21_phi_fu_3443_p20 <= ap_phi_reg_pp0_iter1_phi_ln870_21_reg_3440;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_22_phi_fu_3478_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter1_phi_ln870_22_reg_3475, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= ap_phi_reg_pp0_iter1_phi_ln870_22_reg_3475;
            end if;
        else 
            ap_phi_mux_phi_ln870_22_phi_fu_3478_p20 <= ap_phi_reg_pp0_iter1_phi_ln870_22_reg_3475;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_2_phi_fu_2813_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_2_reg_2810, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_2_reg_2810;
            end if;
        else 
            ap_phi_mux_phi_ln870_2_phi_fu_2813_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_2_reg_2810;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_3_phi_fu_2848_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_3_reg_2845, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_3_reg_2845;
            end if;
        else 
            ap_phi_mux_phi_ln870_3_phi_fu_2848_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_3_reg_2845;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_4_phi_fu_2883_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_4_reg_2880, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_4_reg_2880;
            end if;
        else 
            ap_phi_mux_phi_ln870_4_phi_fu_2883_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_4_reg_2880;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_5_phi_fu_2918_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_5_reg_2915, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_5_reg_2915;
            end if;
        else 
            ap_phi_mux_phi_ln870_5_phi_fu_2918_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_5_reg_2915;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_6_phi_fu_2953_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_6_reg_2950, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_6_reg_2950;
            end if;
        else 
            ap_phi_mux_phi_ln870_6_phi_fu_2953_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_6_reg_2950;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_7_phi_fu_2988_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_A, inB_1_Dout_A, inB_2_Dout_A, inB_3_Dout_A, inB_4_Dout_A, inB_5_Dout_A, inB_6_Dout_A, inB_7_Dout_A, inB_8_Dout_A, inB_9_Dout_A, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_7_reg_2985, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= inB_9_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= inB_8_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= inB_7_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= inB_6_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= inB_5_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= inB_4_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= inB_3_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= inB_2_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= inB_1_Dout_A;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= inB_0_Dout_A;
            else 
                ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_7_reg_2985;
            end if;
        else 
            ap_phi_mux_phi_ln870_7_phi_fu_2988_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_7_reg_2985;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_8_phi_fu_3023_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_8_reg_3020, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_8_reg_3020;
            end if;
        else 
            ap_phi_mux_phi_ln870_8_phi_fu_3023_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_8_reg_3020;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_9_phi_fu_2683_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_9_reg_2680, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_9_reg_2680;
            end if;
        else 
            ap_phi_mux_phi_ln870_9_phi_fu_2683_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_9_reg_2680;
        end if; 
    end process;


    ap_phi_mux_phi_ln870_phi_fu_2718_p20_assign_proc : process(icmp_ln1057_reg_5314, inB_0_Dout_B, inB_1_Dout_B, inB_2_Dout_B, inB_3_Dout_B, inB_4_Dout_B, inB_5_Dout_B, inB_6_Dout_B, inB_7_Dout_B, inB_8_Dout_B, inB_9_Dout_B, select_ln1057_reg_5323, ap_phi_reg_pp0_iter0_phi_ln870_reg_2715, ap_condition_2396)
    begin
        if ((icmp_ln1057_reg_5314 = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_2396)) then 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= inB_9_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_8)) then 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= inB_8_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_7)) then 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= inB_7_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_6)) then 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= inB_6_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= inB_5_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= inB_4_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= inB_3_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= inB_2_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= inB_1_Dout_B;
            elsif ((select_ln1057_reg_5323 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= inB_0_Dout_B;
            else 
                ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_reg_2715;
            end if;
        else 
            ap_phi_mux_phi_ln870_phi_fu_2718_p20 <= ap_phi_reg_pp0_iter0_phi_ln870_reg_2715;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_phi_ln870_10_reg_3055 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_11_reg_3090 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_12_reg_3125 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_13_reg_3160 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_14_reg_3195 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_15_reg_3230 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_16_reg_3265 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_17_reg_3300 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_18_reg_3335 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_19_reg_3370 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_1_reg_2750 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_20_reg_3405 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_2_reg_2810 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_3_reg_2845 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_4_reg_2880 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_5_reg_2915 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_6_reg_2950 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_7_reg_2985 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_8_reg_3020 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_9_reg_2680 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_phi_ln870_reg_2715 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_phi_ln870_21_reg_3440 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_phi_ln870_22_reg_3475 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_i_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i_V_fu_210)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_V_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_V_load <= i_V_fu_210;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_214)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_214;
        end if; 
    end process;


    ap_sig_allocacmp_j_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_V_fu_206, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_V_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_V_load <= j_V_fu_206;
        end if; 
    end process;

    grp_fu_4087_p0 <= ap_phi_reg_pp0_iter0_phi_ln870_23_reg_2785(10 - 1 downto 0);
    icmp_ln1057_1_fu_3546_p2 <= "1" when (ap_sig_allocacmp_j_V_load = ap_const_lv4_A) else "0";
    icmp_ln1057_fu_3528_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_C8) else "0";
    inA_0_Addr_A <= std_logic_vector(shift_left(unsigned(inA_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_0_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_0_Clk_A <= ap_clk;
    inA_0_Din_A <= ap_const_lv32_0;

    inA_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_0_EN_A <= ap_const_logic_1;
        else 
            inA_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_0_Rst_A <= ap_rst_n_inv;
    inA_0_WEN_A <= ap_const_lv4_0;
    inA_10_Addr_A <= std_logic_vector(shift_left(unsigned(inA_10_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_10_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_10_Clk_A <= ap_clk;
    inA_10_Din_A <= ap_const_lv32_0;

    inA_10_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_10_EN_A <= ap_const_logic_1;
        else 
            inA_10_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_10_Rst_A <= ap_rst_n_inv;
    inA_10_WEN_A <= ap_const_lv4_0;
    inA_11_Addr_A <= std_logic_vector(shift_left(unsigned(inA_11_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_11_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_11_Clk_A <= ap_clk;
    inA_11_Din_A <= ap_const_lv32_0;

    inA_11_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_11_EN_A <= ap_const_logic_1;
        else 
            inA_11_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_11_Rst_A <= ap_rst_n_inv;
    inA_11_WEN_A <= ap_const_lv4_0;
    inA_12_Addr_A <= std_logic_vector(shift_left(unsigned(inA_12_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_12_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_12_Clk_A <= ap_clk;
    inA_12_Din_A <= ap_const_lv32_0;

    inA_12_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_12_EN_A <= ap_const_logic_1;
        else 
            inA_12_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_12_Rst_A <= ap_rst_n_inv;
    inA_12_WEN_A <= ap_const_lv4_0;
    inA_13_Addr_A <= std_logic_vector(shift_left(unsigned(inA_13_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_13_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_13_Clk_A <= ap_clk;
    inA_13_Din_A <= ap_const_lv32_0;

    inA_13_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_13_EN_A <= ap_const_logic_1;
        else 
            inA_13_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_13_Rst_A <= ap_rst_n_inv;
    inA_13_WEN_A <= ap_const_lv4_0;
    inA_14_Addr_A <= std_logic_vector(shift_left(unsigned(inA_14_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_14_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_14_Clk_A <= ap_clk;
    inA_14_Din_A <= ap_const_lv32_0;

    inA_14_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_14_EN_A <= ap_const_logic_1;
        else 
            inA_14_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_14_Rst_A <= ap_rst_n_inv;
    inA_14_WEN_A <= ap_const_lv4_0;
    inA_15_Addr_A <= std_logic_vector(shift_left(unsigned(inA_15_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_15_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_15_Clk_A <= ap_clk;
    inA_15_Din_A <= ap_const_lv32_0;

    inA_15_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_15_EN_A <= ap_const_logic_1;
        else 
            inA_15_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_15_Rst_A <= ap_rst_n_inv;
    inA_15_WEN_A <= ap_const_lv4_0;
    inA_16_Addr_A <= std_logic_vector(shift_left(unsigned(inA_16_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_16_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_16_Clk_A <= ap_clk;
    inA_16_Din_A <= ap_const_lv32_0;

    inA_16_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_16_EN_A <= ap_const_logic_1;
        else 
            inA_16_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_16_Rst_A <= ap_rst_n_inv;
    inA_16_WEN_A <= ap_const_lv4_0;
    inA_17_Addr_A <= std_logic_vector(shift_left(unsigned(inA_17_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_17_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_17_Clk_A <= ap_clk;
    inA_17_Din_A <= ap_const_lv32_0;

    inA_17_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_17_EN_A <= ap_const_logic_1;
        else 
            inA_17_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_17_Rst_A <= ap_rst_n_inv;
    inA_17_WEN_A <= ap_const_lv4_0;
    inA_18_Addr_A <= std_logic_vector(shift_left(unsigned(inA_18_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_18_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_18_Clk_A <= ap_clk;
    inA_18_Din_A <= ap_const_lv32_0;

    inA_18_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_18_EN_A <= ap_const_logic_1;
        else 
            inA_18_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_18_Rst_A <= ap_rst_n_inv;
    inA_18_WEN_A <= ap_const_lv4_0;
    inA_19_Addr_A <= std_logic_vector(shift_left(unsigned(inA_19_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_19_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_19_Clk_A <= ap_clk;
    inA_19_Din_A <= ap_const_lv32_0;

    inA_19_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_19_EN_A <= ap_const_logic_1;
        else 
            inA_19_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_19_Rst_A <= ap_rst_n_inv;
    inA_19_WEN_A <= ap_const_lv4_0;
    inA_1_Addr_A <= std_logic_vector(shift_left(unsigned(inA_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_1_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_1_Clk_A <= ap_clk;
    inA_1_Din_A <= ap_const_lv32_0;

    inA_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_1_EN_A <= ap_const_logic_1;
        else 
            inA_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_1_Rst_A <= ap_rst_n_inv;
    inA_1_WEN_A <= ap_const_lv4_0;
    inA_20_Addr_A <= std_logic_vector(shift_left(unsigned(inA_20_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_20_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_20_Clk_A <= ap_clk;
    inA_20_Din_A <= ap_const_lv32_0;

    inA_20_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_20_EN_A <= ap_const_logic_1;
        else 
            inA_20_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_20_Rst_A <= ap_rst_n_inv;
    inA_20_WEN_A <= ap_const_lv4_0;
    inA_21_Addr_A <= std_logic_vector(shift_left(unsigned(inA_21_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_21_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_21_Clk_A <= ap_clk;
    inA_21_Din_A <= ap_const_lv32_0;

    inA_21_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_21_EN_A <= ap_const_logic_1;
        else 
            inA_21_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_21_Rst_A <= ap_rst_n_inv;
    inA_21_WEN_A <= ap_const_lv4_0;
    inA_22_Addr_A <= std_logic_vector(shift_left(unsigned(inA_22_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_22_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_22_Clk_A <= ap_clk;
    inA_22_Din_A <= ap_const_lv32_0;

    inA_22_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_22_EN_A <= ap_const_logic_1;
        else 
            inA_22_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_22_Rst_A <= ap_rst_n_inv;
    inA_22_WEN_A <= ap_const_lv4_0;
    inA_23_Addr_A <= std_logic_vector(shift_left(unsigned(inA_23_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_23_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_23_Clk_A <= ap_clk;
    inA_23_Din_A <= ap_const_lv32_0;

    inA_23_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_23_EN_A <= ap_const_logic_1;
        else 
            inA_23_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_23_Rst_A <= ap_rst_n_inv;
    inA_23_WEN_A <= ap_const_lv4_0;
    inA_2_Addr_A <= std_logic_vector(shift_left(unsigned(inA_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_2_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_2_Clk_A <= ap_clk;
    inA_2_Din_A <= ap_const_lv32_0;

    inA_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_2_EN_A <= ap_const_logic_1;
        else 
            inA_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_2_Rst_A <= ap_rst_n_inv;
    inA_2_WEN_A <= ap_const_lv4_0;
    inA_3_Addr_A <= std_logic_vector(shift_left(unsigned(inA_3_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_3_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_3_Clk_A <= ap_clk;
    inA_3_Din_A <= ap_const_lv32_0;

    inA_3_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_3_EN_A <= ap_const_logic_1;
        else 
            inA_3_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_3_Rst_A <= ap_rst_n_inv;
    inA_3_WEN_A <= ap_const_lv4_0;
    inA_4_Addr_A <= std_logic_vector(shift_left(unsigned(inA_4_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_4_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_4_Clk_A <= ap_clk;
    inA_4_Din_A <= ap_const_lv32_0;

    inA_4_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_4_EN_A <= ap_const_logic_1;
        else 
            inA_4_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_4_Rst_A <= ap_rst_n_inv;
    inA_4_WEN_A <= ap_const_lv4_0;
    inA_5_Addr_A <= std_logic_vector(shift_left(unsigned(inA_5_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_5_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_5_Clk_A <= ap_clk;
    inA_5_Din_A <= ap_const_lv32_0;

    inA_5_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_5_EN_A <= ap_const_logic_1;
        else 
            inA_5_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_5_Rst_A <= ap_rst_n_inv;
    inA_5_WEN_A <= ap_const_lv4_0;
    inA_6_Addr_A <= std_logic_vector(shift_left(unsigned(inA_6_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_6_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_6_Clk_A <= ap_clk;
    inA_6_Din_A <= ap_const_lv32_0;

    inA_6_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_6_EN_A <= ap_const_logic_1;
        else 
            inA_6_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_6_Rst_A <= ap_rst_n_inv;
    inA_6_WEN_A <= ap_const_lv4_0;
    inA_7_Addr_A <= std_logic_vector(shift_left(unsigned(inA_7_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_7_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_7_Clk_A <= ap_clk;
    inA_7_Din_A <= ap_const_lv32_0;

    inA_7_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_7_EN_A <= ap_const_logic_1;
        else 
            inA_7_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_7_Rst_A <= ap_rst_n_inv;
    inA_7_WEN_A <= ap_const_lv4_0;
    inA_8_Addr_A <= std_logic_vector(shift_left(unsigned(inA_8_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_8_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_8_Clk_A <= ap_clk;
    inA_8_Din_A <= ap_const_lv32_0;

    inA_8_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_8_EN_A <= ap_const_logic_1;
        else 
            inA_8_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_8_Rst_A <= ap_rst_n_inv;
    inA_8_WEN_A <= ap_const_lv4_0;
    inA_9_Addr_A <= std_logic_vector(shift_left(unsigned(inA_9_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    inA_9_Addr_A_orig <= zext_ln1057_fu_3574_p1(32 - 1 downto 0);
    inA_9_Clk_A <= ap_clk;
    inA_9_Din_A <= ap_const_lv32_0;

    inA_9_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inA_9_EN_A <= ap_const_logic_1;
        else 
            inA_9_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    inA_9_Rst_A <= ap_rst_n_inv;
    inA_9_WEN_A <= ap_const_lv4_0;
    inB_0_Addr_A <= std_logic_vector(shift_left(unsigned(inB_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_0_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_0_Addr_A_orig <= ap_const_lv64_17(32 - 1 downto 0);
            else 
                inB_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_0_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_0_Addr_B <= std_logic_vector(shift_left(unsigned(inB_0_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_0_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_0_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            else 
                inB_0_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_0_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_0_Clk_A <= ap_clk;
    inB_0_Clk_B <= ap_clk;
    inB_0_Din_A <= ap_const_lv32_0;
    inB_0_Din_B <= ap_const_lv32_0;

    inB_0_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_0_EN_A <= ap_const_logic_1;
        else 
            inB_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    inB_0_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_0_EN_B <= ap_const_logic_1;
        else 
            inB_0_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    inB_0_Rst_A <= ap_rst_n_inv;
    inB_0_Rst_B <= ap_rst_n_inv;
    inB_0_WEN_A <= ap_const_lv4_0;
    inB_0_WEN_B <= ap_const_lv4_0;
    inB_1_Addr_A <= std_logic_vector(shift_left(unsigned(inB_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_1_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_1_Addr_A_orig <= ap_const_lv64_17(32 - 1 downto 0);
            else 
                inB_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_1_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_1_Addr_B <= std_logic_vector(shift_left(unsigned(inB_1_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_1_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_1_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            else 
                inB_1_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_1_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_1_Clk_A <= ap_clk;
    inB_1_Clk_B <= ap_clk;
    inB_1_Din_A <= ap_const_lv32_0;
    inB_1_Din_B <= ap_const_lv32_0;

    inB_1_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_1_EN_A <= ap_const_logic_1;
        else 
            inB_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    inB_1_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_1_EN_B <= ap_const_logic_1;
        else 
            inB_1_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    inB_1_Rst_A <= ap_rst_n_inv;
    inB_1_Rst_B <= ap_rst_n_inv;
    inB_1_WEN_A <= ap_const_lv4_0;
    inB_1_WEN_B <= ap_const_lv4_0;
    inB_2_Addr_A <= std_logic_vector(shift_left(unsigned(inB_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_2_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_2_Addr_A_orig <= ap_const_lv64_17(32 - 1 downto 0);
            else 
                inB_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_2_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_2_Addr_B <= std_logic_vector(shift_left(unsigned(inB_2_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_2_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_2_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            else 
                inB_2_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_2_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_2_Clk_A <= ap_clk;
    inB_2_Clk_B <= ap_clk;
    inB_2_Din_A <= ap_const_lv32_0;
    inB_2_Din_B <= ap_const_lv32_0;

    inB_2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_2_EN_A <= ap_const_logic_1;
        else 
            inB_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    inB_2_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_2_EN_B <= ap_const_logic_1;
        else 
            inB_2_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    inB_2_Rst_A <= ap_rst_n_inv;
    inB_2_Rst_B <= ap_rst_n_inv;
    inB_2_WEN_A <= ap_const_lv4_0;
    inB_2_WEN_B <= ap_const_lv4_0;
    inB_3_Addr_A <= std_logic_vector(shift_left(unsigned(inB_3_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_3_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_3_Addr_A_orig <= ap_const_lv64_17(32 - 1 downto 0);
            else 
                inB_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_3_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_3_Addr_B <= std_logic_vector(shift_left(unsigned(inB_3_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_3_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_3_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            else 
                inB_3_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_3_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_3_Clk_A <= ap_clk;
    inB_3_Clk_B <= ap_clk;
    inB_3_Din_A <= ap_const_lv32_0;
    inB_3_Din_B <= ap_const_lv32_0;

    inB_3_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_3_EN_A <= ap_const_logic_1;
        else 
            inB_3_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    inB_3_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_3_EN_B <= ap_const_logic_1;
        else 
            inB_3_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    inB_3_Rst_A <= ap_rst_n_inv;
    inB_3_Rst_B <= ap_rst_n_inv;
    inB_3_WEN_A <= ap_const_lv4_0;
    inB_3_WEN_B <= ap_const_lv4_0;
    inB_4_Addr_A <= std_logic_vector(shift_left(unsigned(inB_4_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_4_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_4_Addr_A_orig <= ap_const_lv64_17(32 - 1 downto 0);
            else 
                inB_4_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_4_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_4_Addr_B <= std_logic_vector(shift_left(unsigned(inB_4_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_4_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_4_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            else 
                inB_4_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_4_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_4_Clk_A <= ap_clk;
    inB_4_Clk_B <= ap_clk;
    inB_4_Din_A <= ap_const_lv32_0;
    inB_4_Din_B <= ap_const_lv32_0;

    inB_4_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_4_EN_A <= ap_const_logic_1;
        else 
            inB_4_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    inB_4_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_4_EN_B <= ap_const_logic_1;
        else 
            inB_4_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    inB_4_Rst_A <= ap_rst_n_inv;
    inB_4_Rst_B <= ap_rst_n_inv;
    inB_4_WEN_A <= ap_const_lv4_0;
    inB_4_WEN_B <= ap_const_lv4_0;
    inB_5_Addr_A <= std_logic_vector(shift_left(unsigned(inB_5_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_5_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_5_Addr_A_orig <= ap_const_lv64_17(32 - 1 downto 0);
            else 
                inB_5_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_5_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_5_Addr_B <= std_logic_vector(shift_left(unsigned(inB_5_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_5_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_5_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            else 
                inB_5_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_5_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_5_Clk_A <= ap_clk;
    inB_5_Clk_B <= ap_clk;
    inB_5_Din_A <= ap_const_lv32_0;
    inB_5_Din_B <= ap_const_lv32_0;

    inB_5_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_5_EN_A <= ap_const_logic_1;
        else 
            inB_5_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    inB_5_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_5_EN_B <= ap_const_logic_1;
        else 
            inB_5_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    inB_5_Rst_A <= ap_rst_n_inv;
    inB_5_Rst_B <= ap_rst_n_inv;
    inB_5_WEN_A <= ap_const_lv4_0;
    inB_5_WEN_B <= ap_const_lv4_0;
    inB_6_Addr_A <= std_logic_vector(shift_left(unsigned(inB_6_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_6_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_6_Addr_A_orig <= ap_const_lv64_17(32 - 1 downto 0);
            else 
                inB_6_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_6_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_6_Addr_B <= std_logic_vector(shift_left(unsigned(inB_6_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_6_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_6_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            else 
                inB_6_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_6_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_6_Clk_A <= ap_clk;
    inB_6_Clk_B <= ap_clk;
    inB_6_Din_A <= ap_const_lv32_0;
    inB_6_Din_B <= ap_const_lv32_0;

    inB_6_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_6_EN_A <= ap_const_logic_1;
        else 
            inB_6_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    inB_6_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_6_EN_B <= ap_const_logic_1;
        else 
            inB_6_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    inB_6_Rst_A <= ap_rst_n_inv;
    inB_6_Rst_B <= ap_rst_n_inv;
    inB_6_WEN_A <= ap_const_lv4_0;
    inB_6_WEN_B <= ap_const_lv4_0;
    inB_7_Addr_A <= std_logic_vector(shift_left(unsigned(inB_7_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_7_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_7_Addr_A_orig <= ap_const_lv64_17(32 - 1 downto 0);
            else 
                inB_7_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_7_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_7_Addr_B <= std_logic_vector(shift_left(unsigned(inB_7_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_7_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_7_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            else 
                inB_7_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_7_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_7_Clk_A <= ap_clk;
    inB_7_Clk_B <= ap_clk;
    inB_7_Din_A <= ap_const_lv32_0;
    inB_7_Din_B <= ap_const_lv32_0;

    inB_7_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_7_EN_A <= ap_const_logic_1;
        else 
            inB_7_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    inB_7_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_7_EN_B <= ap_const_logic_1;
        else 
            inB_7_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    inB_7_Rst_A <= ap_rst_n_inv;
    inB_7_Rst_B <= ap_rst_n_inv;
    inB_7_WEN_A <= ap_const_lv4_0;
    inB_7_WEN_B <= ap_const_lv4_0;
    inB_8_Addr_A <= std_logic_vector(shift_left(unsigned(inB_8_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_8_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_8_Addr_A_orig <= ap_const_lv64_17(32 - 1 downto 0);
            else 
                inB_8_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_8_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_8_Addr_B <= std_logic_vector(shift_left(unsigned(inB_8_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_8_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_8_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            else 
                inB_8_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_8_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_8_Clk_A <= ap_clk;
    inB_8_Clk_B <= ap_clk;
    inB_8_Din_A <= ap_const_lv32_0;
    inB_8_Din_B <= ap_const_lv32_0;

    inB_8_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_8_EN_A <= ap_const_logic_1;
        else 
            inB_8_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    inB_8_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_8_EN_B <= ap_const_logic_1;
        else 
            inB_8_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    inB_8_Rst_A <= ap_rst_n_inv;
    inB_8_Rst_B <= ap_rst_n_inv;
    inB_8_WEN_A <= ap_const_lv4_0;
    inB_8_WEN_B <= ap_const_lv4_0;
    inB_9_Addr_A <= std_logic_vector(shift_left(unsigned(inB_9_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_9_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_16(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_14(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_12(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_10(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_E(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_C(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_A(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_7(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_5(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_3(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_9_Addr_A_orig <= ap_const_lv64_17(32 - 1 downto 0);
            else 
                inB_9_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_9_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_9_Addr_B <= std_logic_vector(shift_left(unsigned(inB_9_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    inB_9_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_15(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_13(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_11(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_F(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_D(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_B(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_8(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_6(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_4(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_2(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_0(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                inB_9_Addr_B_orig <= ap_const_lv64_9(32 - 1 downto 0);
            else 
                inB_9_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            inB_9_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    inB_9_Clk_A <= ap_clk;
    inB_9_Clk_B <= ap_clk;
    inB_9_Din_A <= ap_const_lv32_0;
    inB_9_Din_B <= ap_const_lv32_0;

    inB_9_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_9_EN_A <= ap_const_logic_1;
        else 
            inB_9_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    inB_9_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            inB_9_EN_B <= ap_const_logic_1;
        else 
            inB_9_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    inB_9_Rst_A <= ap_rst_n_inv;
    inB_9_Rst_B <= ap_rst_n_inv;
    inB_9_WEN_A <= ap_const_lv4_0;
    inB_9_WEN_B <= ap_const_lv4_0;
    mul_ln870_10_fu_3836_p0 <= ap_phi_mux_phi_ln870_10_phi_fu_3058_p20(10 - 1 downto 0);
    mul_ln870_11_fu_3855_p0 <= ap_phi_mux_phi_ln870_11_phi_fu_3093_p20(10 - 1 downto 0);
    mul_ln870_12_fu_3864_p0 <= ap_phi_mux_phi_ln870_12_phi_fu_3128_p20(10 - 1 downto 0);
    mul_ln870_13_fu_3892_p0 <= ap_phi_mux_phi_ln870_13_phi_fu_3163_p20(10 - 1 downto 0);
    mul_ln870_14_fu_3901_p0 <= ap_phi_mux_phi_ln870_14_phi_fu_3198_p20(10 - 1 downto 0);
    mul_ln870_15_fu_3915_p0 <= ap_phi_mux_phi_ln870_15_phi_fu_3233_p20(10 - 1 downto 0);
    mul_ln870_16_fu_3924_p0 <= ap_phi_mux_phi_ln870_16_phi_fu_3268_p20(10 - 1 downto 0);
    mul_ln870_17_fu_3944_p0 <= ap_phi_mux_phi_ln870_17_phi_fu_3303_p20(10 - 1 downto 0);
    mul_ln870_18_fu_3953_p0 <= ap_phi_mux_phi_ln870_18_phi_fu_3338_p20(10 - 1 downto 0);
    mul_ln870_19_fu_3971_p0 <= ap_phi_mux_phi_ln870_19_phi_fu_3373_p20(10 - 1 downto 0);
    mul_ln870_1_fu_3739_p0 <= ap_phi_mux_phi_ln870_1_phi_fu_2753_p20(10 - 1 downto 0);
    mul_ln870_20_fu_3980_p0 <= ap_phi_mux_phi_ln870_20_phi_fu_3408_p20(10 - 1 downto 0);
    mul_ln870_21_fu_3999_p0 <= ap_phi_mux_phi_ln870_21_phi_fu_3443_p20(10 - 1 downto 0);
    mul_ln870_22_fu_4008_p0 <= ap_phi_mux_phi_ln870_22_phi_fu_3478_p20(10 - 1 downto 0);
    mul_ln870_2_fu_3752_p0 <= ap_phi_mux_phi_ln870_2_phi_fu_2813_p20(10 - 1 downto 0);
    mul_ln870_3_fu_3761_p0 <= ap_phi_mux_phi_ln870_3_phi_fu_2848_p20(10 - 1 downto 0);
    mul_ln870_4_fu_3780_p0 <= ap_phi_mux_phi_ln870_4_phi_fu_2883_p20(10 - 1 downto 0);
    mul_ln870_5_fu_3789_p0 <= ap_phi_mux_phi_ln870_5_phi_fu_2918_p20(10 - 1 downto 0);
    mul_ln870_6_fu_3809_p0 <= ap_phi_mux_phi_ln870_6_phi_fu_2953_p20(10 - 1 downto 0);
    mul_ln870_7_fu_3818_p0 <= ap_phi_mux_phi_ln870_7_phi_fu_2988_p20(10 - 1 downto 0);
    mul_ln870_8_fu_3827_p0 <= ap_phi_mux_phi_ln870_8_phi_fu_3023_p20(10 - 1 downto 0);
    mul_ln870_9_fu_3646_p0 <= ap_phi_mux_phi_ln870_9_phi_fu_2683_p20(10 - 1 downto 0);
    mul_ln870_9_fu_3646_p1 <= inA_9_Dout_A(10 - 1 downto 0);
    mul_ln870_fu_3730_p0 <= ap_phi_mux_phi_ln870_phi_fu_2718_p20(10 - 1 downto 0);
    out_0_Addr_A <= std_logic_vector(shift_left(unsigned(out_0_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_0_Addr_A_orig <= zext_ln1057_reg_5333_pp0_iter1_reg(32 - 1 downto 0);
    out_0_Clk_A <= ap_clk;
    out_0_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_24_fu_4032_p2),32));

    out_0_EN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_0_EN_A <= ap_const_logic_1;
        else 
            out_0_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_0_Rst_A <= ap_rst_n_inv;

    out_0_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln1057_reg_5323_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_0))) then 
            out_0_WEN_A <= ap_const_lv4_7;
        else 
            out_0_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    out_1_Addr_A <= std_logic_vector(shift_left(unsigned(out_1_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_1_Addr_A_orig <= zext_ln1057_reg_5333_pp0_iter1_reg(32 - 1 downto 0);
    out_1_Clk_A <= ap_clk;
    out_1_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_24_fu_4032_p2),32));

    out_1_EN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_1_EN_A <= ap_const_logic_1;
        else 
            out_1_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_1_Rst_A <= ap_rst_n_inv;

    out_1_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln1057_reg_5323_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_1))) then 
            out_1_WEN_A <= ap_const_lv4_7;
        else 
            out_1_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    out_2_Addr_A <= std_logic_vector(shift_left(unsigned(out_2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_2_Addr_A_orig <= zext_ln1057_reg_5333_pp0_iter1_reg(32 - 1 downto 0);
    out_2_Clk_A <= ap_clk;
    out_2_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_24_fu_4032_p2),32));

    out_2_EN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_2_EN_A <= ap_const_logic_1;
        else 
            out_2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_2_Rst_A <= ap_rst_n_inv;

    out_2_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln1057_reg_5323_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_2))) then 
            out_2_WEN_A <= ap_const_lv4_7;
        else 
            out_2_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    out_3_Addr_A <= std_logic_vector(shift_left(unsigned(out_3_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_3_Addr_A_orig <= zext_ln1057_reg_5333_pp0_iter1_reg(32 - 1 downto 0);
    out_3_Clk_A <= ap_clk;
    out_3_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_24_fu_4032_p2),32));

    out_3_EN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_3_EN_A <= ap_const_logic_1;
        else 
            out_3_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_3_Rst_A <= ap_rst_n_inv;

    out_3_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln1057_reg_5323_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_3))) then 
            out_3_WEN_A <= ap_const_lv4_7;
        else 
            out_3_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    out_4_Addr_A <= std_logic_vector(shift_left(unsigned(out_4_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_4_Addr_A_orig <= zext_ln1057_reg_5333_pp0_iter1_reg(32 - 1 downto 0);
    out_4_Clk_A <= ap_clk;
    out_4_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_24_fu_4032_p2),32));

    out_4_EN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_4_EN_A <= ap_const_logic_1;
        else 
            out_4_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_4_Rst_A <= ap_rst_n_inv;

    out_4_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln1057_reg_5323_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_4))) then 
            out_4_WEN_A <= ap_const_lv4_7;
        else 
            out_4_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    out_5_Addr_A <= std_logic_vector(shift_left(unsigned(out_5_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_5_Addr_A_orig <= zext_ln1057_reg_5333_pp0_iter1_reg(32 - 1 downto 0);
    out_5_Clk_A <= ap_clk;
    out_5_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_24_fu_4032_p2),32));

    out_5_EN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_5_EN_A <= ap_const_logic_1;
        else 
            out_5_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_5_Rst_A <= ap_rst_n_inv;

    out_5_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln1057_reg_5323_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_5))) then 
            out_5_WEN_A <= ap_const_lv4_7;
        else 
            out_5_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    out_6_Addr_A <= std_logic_vector(shift_left(unsigned(out_6_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_6_Addr_A_orig <= zext_ln1057_reg_5333_pp0_iter1_reg(32 - 1 downto 0);
    out_6_Clk_A <= ap_clk;
    out_6_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_24_fu_4032_p2),32));

    out_6_EN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_6_EN_A <= ap_const_logic_1;
        else 
            out_6_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_6_Rst_A <= ap_rst_n_inv;

    out_6_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln1057_reg_5323_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_6))) then 
            out_6_WEN_A <= ap_const_lv4_7;
        else 
            out_6_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    out_7_Addr_A <= std_logic_vector(shift_left(unsigned(out_7_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_7_Addr_A_orig <= zext_ln1057_reg_5333_pp0_iter1_reg(32 - 1 downto 0);
    out_7_Clk_A <= ap_clk;
    out_7_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_24_fu_4032_p2),32));

    out_7_EN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_7_EN_A <= ap_const_logic_1;
        else 
            out_7_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_7_Rst_A <= ap_rst_n_inv;

    out_7_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln1057_reg_5323_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_7))) then 
            out_7_WEN_A <= ap_const_lv4_7;
        else 
            out_7_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    out_8_Addr_A <= std_logic_vector(shift_left(unsigned(out_8_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_8_Addr_A_orig <= zext_ln1057_reg_5333_pp0_iter1_reg(32 - 1 downto 0);
    out_8_Clk_A <= ap_clk;
    out_8_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_24_fu_4032_p2),32));

    out_8_EN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_8_EN_A <= ap_const_logic_1;
        else 
            out_8_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_8_Rst_A <= ap_rst_n_inv;

    out_8_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln1057_reg_5323_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_8))) then 
            out_8_WEN_A <= ap_const_lv4_7;
        else 
            out_8_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    out_9_Addr_A <= std_logic_vector(shift_left(unsigned(out_9_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    out_9_Addr_A_orig <= zext_ln1057_reg_5333_pp0_iter1_reg(32 - 1 downto 0);
    out_9_Clk_A <= ap_clk;
    out_9_Din_A <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln870_24_fu_4032_p2),32));

    out_9_EN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_9_EN_A <= ap_const_logic_1;
        else 
            out_9_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    out_9_Rst_A <= ap_rst_n_inv;

    out_9_WEN_A_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln1057_reg_5323_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and ((select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_9) or ((select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_A) or ((select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_B) or ((select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_C) or ((select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_D) or ((select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_E) or (select_ln1057_reg_5323_pp0_iter1_reg = ap_const_lv4_F))))))))) then 
            out_9_WEN_A <= ap_const_lv4_7;
        else 
            out_9_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    select_ln1057_1_fu_3566_p3 <= 
        add_ln870_fu_3560_p2 when (icmp_ln1057_1_fu_3546_p2(0) = '1') else 
        ap_sig_allocacmp_i_V_load;
    select_ln1057_fu_3552_p3 <= 
        ap_const_lv4_0 when (icmp_ln1057_1_fu_3546_p2(0) = '1') else 
        ap_sig_allocacmp_j_V_load;
    trunc_ln870_10_fu_3652_p1 <= inA_10_Dout_A(10 - 1 downto 0);
    trunc_ln870_11_fu_3656_p1 <= inA_11_Dout_A(10 - 1 downto 0);
    trunc_ln870_12_fu_3660_p1 <= inA_12_Dout_A(10 - 1 downto 0);
    trunc_ln870_13_fu_3664_p1 <= inA_13_Dout_A(10 - 1 downto 0);
    trunc_ln870_14_fu_3668_p1 <= inA_14_Dout_A(10 - 1 downto 0);
    trunc_ln870_15_fu_3672_p1 <= inA_15_Dout_A(10 - 1 downto 0);
    trunc_ln870_16_fu_3676_p1 <= inA_16_Dout_A(10 - 1 downto 0);
    trunc_ln870_17_fu_3680_p1 <= inA_17_Dout_A(10 - 1 downto 0);
    trunc_ln870_18_fu_3684_p1 <= inA_18_Dout_A(10 - 1 downto 0);
    trunc_ln870_19_fu_3688_p1 <= inA_19_Dout_A(10 - 1 downto 0);
    trunc_ln870_1_fu_3606_p1 <= inA_1_Dout_A(10 - 1 downto 0);
    trunc_ln870_20_fu_3692_p1 <= inA_20_Dout_A(10 - 1 downto 0);
    trunc_ln870_21_fu_3696_p1 <= inA_21_Dout_A(10 - 1 downto 0);
    trunc_ln870_22_fu_3700_p1 <= inA_22_Dout_A(10 - 1 downto 0);
    trunc_ln870_23_fu_3704_p1 <= inA_23_Dout_A(10 - 1 downto 0);
    trunc_ln870_2_fu_3610_p1 <= inA_2_Dout_A(10 - 1 downto 0);
    trunc_ln870_3_fu_3614_p1 <= inA_3_Dout_A(10 - 1 downto 0);
    trunc_ln870_4_fu_3618_p1 <= inA_4_Dout_A(10 - 1 downto 0);
    trunc_ln870_5_fu_3622_p1 <= inA_5_Dout_A(10 - 1 downto 0);
    trunc_ln870_6_fu_3626_p1 <= inA_6_Dout_A(10 - 1 downto 0);
    trunc_ln870_7_fu_3630_p1 <= inA_7_Dout_A(10 - 1 downto 0);
    trunc_ln870_8_fu_3634_p1 <= inA_8_Dout_A(10 - 1 downto 0);
    trunc_ln870_fu_3602_p1 <= inA_0_Dout_A(10 - 1 downto 0);
    zext_ln1057_fu_3574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1057_1_fu_3566_p3),64));
end behav;
